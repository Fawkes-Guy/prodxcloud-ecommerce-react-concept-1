# Nombre del workflow para la interfaz de GitHub
name: Deploy to Production (EKS)

# --- DISPARADORES ---
# Define cuándo se ejecutará este workflow
on:
  # Se activa al hacer push a la rama 'main'
  push:
    branches: [ main ]
  # Se activa manualmente desde la pestaña Actions en GitHub
  workflow_dispatch:

# --- VARIABLES DE ENTORNO GLOBALES ---
# Disponibles para todos los jobs
env:
  AWS_DEFAULT_REGION: us-east-2
  TERRAFORM_WORKING_DIR: ./eks-tf
  DOCKER_IMAGE_NAME: cesardromero/prodxcloud-store # Tu usuario/nombre de imagen

# --- JOBS ---
# Secuencia de trabajos a ejecutar
jobs:
  # Job 1: Escaneo de código (placeholder)
  CodeScan:
    name: Code Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Running code scan (placeholder)
        run: echo "Code scanning step..."

  # Job 2: Construir y subir la imagen Docker
  Build-and-Push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [CodeScan] # Se ejecuta después de CodeScan
    # Usa los secretos del entorno de producción
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install

      - name: Build React application
        run: npm run build --if-present

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Usamos el token como contraseña
      
      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  # Job 3: Escaneo de vulnerabilidades de la imagen
  Scan-Image:
    name: Scan Docker Image (Trivy)
    runs-on: ubuntu-latest
    needs: [Build-and-Push] # Se ejecuta después de Build-and-Push
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/${{ env.DOCKER_IMAGE_NAME }}:latest'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  # Job 4: Desplegar en EKS
  Deploy-to-EKS:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [Scan-Image] # Se ejecuta después del escaneo
    # Define el entorno para usar sus secretos y reglas de protección
    environment:
      name: production
      # url: https://production.prodxcloud.net/ # Puedes poner la URL de tu app aquí
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # Si usas credenciales temporales de SSO
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}

      # --- Pasos de Terraform Plan y Apply comentados ---
      # Como la infraestructura ya está creada, estos pasos no son necesarios
      # para el despliegue de la aplicación.
      # - name: Terraform Plan
      #   run: terraform plan -input=false
      #   working-directory: ${{ env.TERRAFORM_WORKING_DIR }}

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve -input=false
      #   working-directory: ${{ env.TERRAFORM_WORKING_DIR }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name prodxcloud-cluster --region ${{ env.AWS_DEFAULT_REGION }}

      - name: Verify kubectl context
        run: kubectl config current-context

      - name: Verify connection to cluster
        run: kubectl get pods
        
      # --- PASO FINAL FALTANTE ---
      # Aquí es donde desplegarías tu aplicación.
      # Necesitarás crear el archivo 'k8s/deployment.yaml' primero.
      # - name: Deploy application to EKS
      #   run: kubectl apply -f k8s/deployment.yaml